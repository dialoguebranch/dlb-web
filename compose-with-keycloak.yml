# Run using docker compose -f compose-with-keycloak.yml up

services:
  dlb-web-service:
    image: dlb-web-service:1.2.4
    ports:
      - 127.0.0.1:8089:8089
  dlb-web-client:
    image: httpd:2.4
    ports:
      - 127.0.0.1:8080:80
    volumes:
      - ./dlb-web-client:/usr/local/apache2/htdocs

########################################
# Keycloak Identity Management Service #
########################################

  # Compose configuration based on https://medium.com/@fingervinicius/easy-running-keycloak-with-docker-compose-b0d7a4ee2358
  keycloak:
    image: quay.io/keycloak/keycloak:26.2.2
    ports:
     - 127.0.0.1:7080:7080
    environment:

      # Hostname used by Keycloak. Running locally must be "localhost".
      KC_HOSTNAME: localhost

      # Keycloak container internal port. Default is 7080.
      KC_HOSTNAME_PORT: 7080

      # Enables or disables backchannel communication between servers.
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"

      # Keycloak admin user username.
      KEYCLOAK_ADMIN: admin

      # Keycloak admin user password.
      KEYCLOAK_ADMIN_PASSWORD: admin

      # Enables Keycloak health endpoints, enabling server health status checks. 
      # This is useful for monitoring and ensuring that Keycloak is working correctly.
      KC_HEALTH_ENABLED: "true"

      # Set the log level for Keycloak.
      KC_LOG_LEVEL: info

    # If KC_HEALTH_ENABLED is 'true', defines the following parameters for performing the health check
    # Basically an http request will be sent to http://localhost:7080/health/ready every 15 seconds to 
    # check if everything is ok. If it gives a timeout of 2 seconds, it will try 15 times, and if it 
    # still doesn’t give a health signal, Docker will mark the container as “unhealty” and take the necessary action.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15

    command: ["start-dev", "--http-port", "7080", "--https-port", "7443"]

networks:
  local_network:
    driver: bridge