tasks.register('dockerBuild') {
    doLast() {
        def dir = file('..')

        def cmd = ['docker', 'build', '--no-cache', '-t', 'dlb-web-service', '-f', './dlb-web/dlb-web-service/with-keycloak.Dockerfile', '.']
        runShell(cmd, dir)

        cmd = ['docker', 'build', '--no-cache', '-t', 'dlb-web-client', '-f', './dlb-web/dlb-web-client-vuejs/Dockerfile', '.']
        runShell(cmd, dir)
    }
}

tasks.register('dockerBuildDev') {
    doLast() {
        def dir = file('..')

        def cmd = ['docker', 'build', '--no-cache', '-t', 'dlb-web-service:dev', '-f', './dlb-web/dlb-web-service/with-keycloak-dev.Dockerfile', '.']
        runShell(cmd, dir)
    }
}

tasks.register('dockerComposeUp') {
    doLast() {
        def properties = new Properties()

        file('secrets.properties').withReader('UTF-8') { reader ->
            properties.load(reader)
        }

        def env = [:]
        properties.each() { key, value ->
            env[key] = value
        }

        def cmd = ['docker', 'compose', '-f', 'dlb-web/docker-compose/compose-with-keycloak.yml', '--project-directory', '.', 'up', '-d']
        def dir = file('..');

        runShell(cmd, dir, env)
    }
}

tasks.register('dockerComposeUpDev') {
    doLast() {
        def properties = new Properties()

        file('secrets.properties').withReader('UTF-8') { reader ->
            properties.load(reader)
        }

        def env = [:]
        properties.each() { key, value ->
            env[key] = value
        }

        def cmd = ['docker', 'compose', '-f', 'dlb-web/docker-compose/compose-with-keycloak-dev.yml', '--project-directory', '.', 'up', '-d']
        def dir = file('..');

        runShell(cmd, dir, env)
    }
}

tasks.register('dockerComposeDown') {
    doLast() {
        def cmd = ['docker', 'compose', '-f', 'dlb-web/docker-compose/compose-with-keycloak.yml', '--project-directory', '.', 'down']
        def dir = file('..');

        runShell(cmd, dir)
    }
}

tasks.register('dockerComposeDownDev') {
    doLast() {
        def cmd = ['docker', 'compose', '-f', 'dlb-web/docker-compose/compose-with-keycloak-dev.yml', '--project-directory', '.', 'down']
        def dir = file('..');

        runShell(cmd, dir)
    }
}

/**
 * Runs a shell command from the specified working directory, possibly with
 * extra environment variables. This function works on Linux, Windows and MacOS.
 * Standard output and error output from the command are printed to standard
 * output.
 *
 * cmd (List<String>): list with the command and arguments. They are simply
 *     joined with spaces, so take care of arguments with whitespace inside.
 * dir (File): the working directory
 * env (Map<String,String>): the environment variables (default: empty map)
 */
def runShell(cmd, dir, env = [:]) {
	def envList = env.collect { key, value -> 
		key + '=' + value
	}
	def cmdStr = cmd.join(' ')
	def cmdList
	if (System.getProperty('os.name').toLowerCase().startsWith('win')) {
		cmdList = ["cmd", "/c"] + cmdStr
	} else {
		cmdList = ['sh', '-c'] + cmdStr
	}
	def builder = new ProcessBuilder(cmdList)
		.directory(dir)
		.redirectErrorStream(true)
	env.each { key, value ->
		builder.environment()[key] = value
	}
	def proc = builder.start()
	def output = proc.inputStream.eachLine { line ->
		println line
	}
	def exitValue = proc.waitFor()
	if (exitValue != 0)
		throw new Exception("Command returned exit value $exitValue")
}
